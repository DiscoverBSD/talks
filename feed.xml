<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DiscoverBSD Talks</title>
  <subtitle>watch - discuss - learn</subtitle>
  <id>https://talks.discoverbsd.com/</id>
  <link href="https://talks.discoverbsd.com/"/>
  <link href="https://talks.discoverbsd.com/feed.xml" rel="self"/>
  <updated>2016-04-17T02:00:00+02:00</updated>
  <author>
    <name>Jan Hovancik and contributors</name>
  </author>
  <entry>
    <title>Protecting FreeBSD with Secure Virtual Architecture</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/04/17/protecting-freebsd-with-secure-virtual-architecture.html"/>
    <id>https://talks.discoverbsd.com/2016/04/17/protecting-freebsd-with-secure-virtual-architecture.html</id>
    <published>2016-04-17T02:00:00+02:00</published>
    <updated>2016-04-17T10:02:09+02:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;

&lt;p&gt;In this talk, I will present our work on using the Secure Virtual Architecture (SVA) to protect FreeBSD applications and the FreeBSD kernel from security attacks. SVA is an LLVM-based infrastructure that permits us to use compiler instrumentation techniques to enforce security policies on both application and kernel code. In this talk, I will briefly describe how we used SVA to implement KCoFI: a system that enforces control-flow integrity and code segment integrity on the FreeBSD kernel to protect it from control-flow hijack attacks. I will then describe how we extended KCoFI to build Virtual Ghost. Virtual Ghost protects applications from a compromised operating system kernel. I will describe how Virtual Ghost uses compiler instrumentation to prevent the FreeBSD kernel from spying on and corrupting private application data and how it prevents the kernel from maliciously modifying application control flow (while still supporting features such as signal handlers and process creation).&lt;/p&gt;

&lt;h4 id="about-the-speaker-john-criswell"&gt;About the Speaker: John Criswell&lt;/h4&gt;
&lt;p&gt;John Criswell is an assistant professor in the Department of Computer Science at the University of Rochester. His research interests are computer security, operating systems, and compilers.&lt;/p&gt;

&lt;p&gt;John Criswell is an assistant professor in the Department of Computer Science at the University of Rochester. He earned both his B.S. in Computer Science (2003) and Ph.D. in Computer Science (2014) at the University of Illinois at Urbana-Champaign.&lt;/p&gt;

&lt;p&gt;John’s research interests focus on computer security and novel applications of compiler and operating system technology. John's primary research work is on the Secure Virtual Architecture (SVA). SVA enforces security policies on commodity operating system and application code via compiler instrumentation, thereby providing strong protection against sophisticated attacks. Using SVA, John built the first systems that provide strong automated memory safety protection and complete control-flow integrity enforcement to commodity operating system kernels such as Linux and FreeBSD. More recently, John has used SVA to create the Virtual Ghost system that protects application data and control-flow from a compromised operating system kernel.&lt;/p&gt;

&lt;p&gt;Prior to joining the University of Rochester, John was a research programmer and graduate student at the University of Illinois. Before that, John worked at Argus Systems Group, Inc. John’s work at Argus Systems Group included enhancements to the AIX operating system kernel and writing utilities that utilized mandatory access controls to improve system security.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Redefining the Desktop Environment for Modern Hardware</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/04/02/lumina-de.html"/>
    <id>https://talks.discoverbsd.com/2016/04/02/lumina-de.html</id>
    <published>2016-04-02T02:00:00+02:00</published>
    <updated>2016-04-17T10:02:09+02:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;p&gt;As the types of personal computers continue to increase, the traditional “desktop computer” is gradually being shifted to a smaller subset of the total systems in use. This presents a problem for open source operating systems, as the available open source graphical environments are increasingly designed for systems with powerful hardware or traditional mouse/keyboard inputs.&lt;/p&gt;

&lt;p&gt;The open-source Lumina desktop environment is designed to solve these problems by meeting its goals of being a highly flexible and scalable interface that runs with relatively little hardware requirements. The project also provides a simple framework for integrating OS-specific functionality directly into the interface for ease-of-use without causing conflict with the underlying system or affecting portability. This session will take a top-level view of the Lumina desktop project, breaking it down to its components, explaining the framework and methodology, and listing the work that is still yet to be completed to achieve its goals.å&lt;/p&gt;

&lt;h4 id="about-the-speaker-ken-moore"&gt;About the Speaker: Ken Moore&lt;/h4&gt;
&lt;p&gt;Ken Moore is one of the developers of PC-BSD and generally responsible for any graphical applications within PC-BSD.&lt;/p&gt;

&lt;p&gt;Ken Moore is an avid Qt developer, and the creator of PC-BSD utilities such as the PCDM login manager, the Lumina desktop environment, EasyPBI, the device mounting utilities, and many more.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>FreeBSD Not a Linux Distro</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/03/13/freebsd-ot-a-linux-distro.html"/>
    <id>https://talks.discoverbsd.com/2016/03/13/freebsd-ot-a-linux-distro.html</id>
    <published>2016-03-13T01:00:00+01:00</published>
    <updated>2016-04-17T10:02:09+02:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;

&lt;p&gt;In this session George Neville-Neil presents the history of FreeBSD.&lt;/p&gt;

&lt;h4 id="about-the-speaker-george-neville-neil"&gt;About the Speaker: George Neville-Neil&lt;/h4&gt;
&lt;p&gt;George Neville-Neil works on networking and operating system code
for fun and profit. He also teaches various course on subjects
related to computer programming. His professional areas of interest
include code spelunking, operating systems, networking and security.
He is the co-author with Marshall Kirk McKusick of &lt;em&gt;The Design and
Implementaion of the FreeBSD operating system&lt;/em&gt; and is the columnist
behind ACM Queue's "Kode Vicious." Mr. Neville-Neil
earned his bachelor's degree in computer science at Northeastern
University in Boston, Massachusetts, and is a member of the ACM,
the Usenix Association and the IEEE. He is an avid bicyclist and
traveler who currently resides in New York City.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>FreeBSD for High Density Servers</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/02/27/freebsd-for-high-density-servers.html"/>
    <id>https://talks.discoverbsd.com/2016/02/27/freebsd-for-high-density-servers.html</id>
    <published>2016-02-27T01:00:00+01:00</published>
    <updated>2016-04-17T10:02:09+02:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;

&lt;p&gt;In this session we will talk about how to install FreeBSD to MicroModularServer and how to manage and control those servers. To install FreeBSD to High Density Servers including NEC MicroModularServer or HP Moonshot, you need another skill compared to install to common PCs and rack mount servers. This kind of servers (low energy consumption, low computing power and high space efficient) are good for too many edge servers/web servers at limited rack space, for example, as an alternative system for Blade servers or many cores servers like Sun Fire T1000/T2000.&lt;/p&gt;

&lt;h4 id="about-the-speaker-daichi-goto"&gt;About the Speaker: Daichi GOTO&lt;/h4&gt;
&lt;p&gt;He is a FreeBSD developer and an IT system developer, and has been a technical writer since 1998, writing many FreeBSD related contents.&lt;/p&gt;

&lt;p&gt;He is a director of BSD Consulting, Inc., a young company at Japan aimed to support FreeBSD-based enterprise system development and its maintenance of the corporate activity. He is a FreeBSD developer and an IT system developer, and has been a technical writer since 1998, writing many FreeBSD and IT relative books, magazines, articles and daily news. Since 2013, he is one of board members of FreeBSD Journal.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CheriBSD - A research fork of FreeBSD</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/02/13/cheribsd-a-research-fork-of-freebsd.html"/>
    <id>https://talks.discoverbsd.com/2016/02/13/cheribsd-a-research-fork-of-freebsd.html</id>
    <published>2016-02-13T01:00:00+01:00</published>
    <updated>2016-04-17T10:02:09+02:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;p&gt;CheriBSD is a fork of FreeBSD to support the CHERI research CPU. We have extended the kernel to provide support for CHERI memory capabilities as well as modifying applications and libraries including tcpdump, libmagic, and libz to take advantage of these capabilities for improved memory safety and compartmentalization. We have also developed custom demo applications and deployment infrastructure for our table demo platform. In this talk I will discuss the challenges facing a long running, public fork of FreeBSD.&lt;/p&gt;

&lt;p&gt;The challenges I discuss will include keeping up with current, our migration from Perforce to Git and the difficulty–and value–of upstreaming improvements. I will also cover our internal and external release process and the products we produce. CheriBSD targets a research environment, but lessons learned will apply to many environments building products or services on customized versions of FreeBSD.&lt;/p&gt;

&lt;h4 id="about-the-speaker-brooks-davis"&gt;About the Speaker: Brooks Davis&lt;/h4&gt;
&lt;p&gt;Brooks Davis is a Senior Software Engineer in the Computer Science Laboratory at SRI International and a Visiting Research Fellow at the University of Cambridge Computer Laboratory. He has been a FreeBSD user since 1994, a FreeBSD committer since 2001, and was a core team member from 2006 to 2012.&lt;/p&gt;

&lt;p&gt;Brooks earned a Bachelors Degree in Computer Science from Harvey Mudd College in 1998. His computing interests include security, operating systems, networking, high performance computing, and, of course, finding ways to use FreeBSD in all these areas. When not computing, he enjoys cooking, brewing, gardening, woodworking, blacksmithing, and hiking.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Reimplementation of NetBSD Using a Microkernel</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/01/31/a-reimplementation-of-netbsd-using-a-microkernel.html"/>
    <id>https://talks.discoverbsd.com/2016/01/31/a-reimplementation-of-netbsd-using-a-microkernel.html</id>
    <published>2016-01-31T01:00:00+01:00</published>
    <updated>2016-04-17T10:02:09+02:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;p&gt;This talk covers some of the history of Minix 3, what it is and why Andrew
started the project, and how after years of fighting it why he realized that
Minix 3 should be more like BSD than being its own thing.&lt;/p&gt;

&lt;p&gt;He also talks a bit about some of the advantages Minix has by using a
Microkernel design rather than the more traditional monolithic kernel, such as
its self healing features (fault tolerance), which allows the system to detect
and recover from things like driver crashes automatically, as well as its
capability to be fully upgraded in place with no need to reboot the entire
system.&lt;/p&gt;

&lt;p&gt;Lastly he goes into how at the userland Minix 3.3 is basically NetBSD, minus a
few of the more obscure system calls, why they chose NetBSD, and where they
currently stand on the project.&lt;/p&gt;

&lt;h4 id="about-the-speaker-andrew-tanenbaum"&gt;About the Speaker: Andrew Tanenbaum&lt;/h4&gt;
&lt;p&gt;Andrew Stuart "Andy" Tanenbaum is an American computer scientist and professor
emeritus of computer science at the Vrje Universiteit, Amsterdam in the
Netherlands.  He is best known as the author of Minix a free Unix-like OS, that
runs off of a Mircokernel and has self healing (high fault tolerance).&lt;/p&gt;
</content>
  </entry>
</feed>
