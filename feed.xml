<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DiscoverBSD Talks</title>
  <subtitle>watch - discuss - learn</subtitle>
  <id>https://talks.discoverbsd.com/</id>
  <link href="https://talks.discoverbsd.com/"/>
  <link href="https://talks.discoverbsd.com/feed.xml" rel="self"/>
  <updated>2016-02-27T01:00:00+01:00</updated>
  <author>
    <name>Jan Hovancik and contributors</name>
  </author>
  <entry>
    <title>FreeBSD for High Density Servers</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/02/27/freebsd-for-high-density-servers.html"/>
    <id>https://talks.discoverbsd.com/2016/02/27/freebsd-for-high-density-servers.html</id>
    <published>2016-02-27T01:00:00+01:00</published>
    <updated>2016-03-05T18:57:19+01:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;

&lt;p&gt;In this session we will talk about how to install FreeBSD to MicroModularServer and how to manage and control those servers. To install FreeBSD to High Density Servers including NEC MicroModularServer or HP Moonshot, you need another skill compared to install to common PCs and rack mount servers. This kind of servers (low energy consumption, low computing power and high space efficient) are good for too many edge servers/web servers at limited rack space, for example, as an alternative system for Blade servers or many cores servers like Sun Fire T1000/T2000.&lt;/p&gt;

&lt;h4 id="about-the-speaker-daichi-goto"&gt;About the Speaker: Daichi GOTO&lt;/h4&gt;
&lt;p&gt;He is a FreeBSD developer and an IT system developer, and has been a technical writer since 1998, writing many FreeBSD related contents.&lt;/p&gt;

&lt;p&gt;He is a director of BSD Consulting, Inc., a young company at Japan aimed to support FreeBSD-based enterprise system development and its maintenance of the corporate activity. He is a FreeBSD developer and an IT system developer, and has been a technical writer since 1998, writing many FreeBSD and IT relative books, magazines, articles and daily news. Since 2013, he is one of board members of FreeBSD Journal.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CheriBSD - A research fork of FreeBSD</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/02/13/cheribsd-a-research-fork-of-freebsd.html"/>
    <id>https://talks.discoverbsd.com/2016/02/13/cheribsd-a-research-fork-of-freebsd.html</id>
    <published>2016-02-13T01:00:00+01:00</published>
    <updated>2016-03-05T18:57:19+01:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;p&gt;CheriBSD is a fork of FreeBSD to support the CHERI research CPU. We have extended the kernel to provide support for CHERI memory capabilities as well as modifying applications and libraries including tcpdump, libmagic, and libz to take advantage of these capabilities for improved memory safety and compartmentalization. We have also developed custom demo applications and deployment infrastructure for our table demo platform. In this talk I will discuss the challenges facing a long running, public fork of FreeBSD.&lt;/p&gt;

&lt;p&gt;The challenges I discuss will include keeping up with current, our migration from Perforce to Git and the difficulty–and value–of upstreaming improvements. I will also cover our internal and external release process and the products we produce. CheriBSD targets a research environment, but lessons learned will apply to many environments building products or services on customized versions of FreeBSD.&lt;/p&gt;

&lt;h4 id="about-the-speaker-brooks-davis"&gt;About the Speaker: Brooks Davis&lt;/h4&gt;
&lt;p&gt;Brooks Davis is a Senior Software Engineer in the Computer Science Laboratory at SRI International and a Visiting Research Fellow at the University of Cambridge Computer Laboratory. He has been a FreeBSD user since 1994, a FreeBSD committer since 2001, and was a core team member from 2006 to 2012.&lt;/p&gt;

&lt;p&gt;Brooks earned a Bachelors Degree in Computer Science from Harvey Mudd College in 1998. His computing interests include security, operating systems, networking, high performance computing, and, of course, finding ways to use FreeBSD in all these areas. When not computing, he enjoys cooking, brewing, gardening, woodworking, blacksmithing, and hiking.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Reimplementation of NetBSD Using a Microkernel</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/01/31/a-reimplementation-of-netbsd-using-a-microkernel.html"/>
    <id>https://talks.discoverbsd.com/2016/01/31/a-reimplementation-of-netbsd-using-a-microkernel.html</id>
    <published>2016-01-31T01:00:00+01:00</published>
    <updated>2016-03-05T18:57:19+01:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;p&gt;This talk covers some of the history of Minix 3, what it is and why Andrew
started the project, and how after years of fighting it why he realized that
Minix 3 should be more like BSD than being its own thing.&lt;/p&gt;

&lt;p&gt;He also talks a bit about some of the advantages Minix has by using a
Microkernel design rather than the more traditional monolithic kernel, such as
its self healing features (fault tolerance), which allows the system to detect
and recover from things like driver crashes automatically, as well as its
capability to be fully upgraded in place with no need to reboot the entire
system.&lt;/p&gt;

&lt;p&gt;Lastly he goes into how at the userland Minix 3.3 is basically NetBSD, minus a
few of the more obscure system calls, why they chose NetBSD, and where they
currently stand on the project.&lt;/p&gt;

&lt;h4 id="about-the-speaker-andrew-tanenbaum"&gt;About the Speaker: Andrew Tanenbaum&lt;/h4&gt;
&lt;p&gt;Andrew Stuart "Andy" Tanenbaum is an American computer scientist and professor
emeritus of computer science at the Vrje Universiteit, Amsterdam in the
Netherlands.  He is best known as the author of Minix a free Unix-like OS, that
runs off of a Mircokernel and has self healing (high fault tolerance).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Unleash your inner console cowboy</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/01/17/unleash-your-inner-console-cowboy.html"/>
    <id>https://talks.discoverbsd.com/2016/01/17/unleash-your-inner-console-cowboy.html</id>
    <published>2016-01-17T01:00:00+01:00</published>
    <updated>2016-03-05T18:57:19+01:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;p&gt;When Stephen Bourne released the his shell in 1977, shell scripting was born and he turned every UNIX user into a developer.&lt;/p&gt;

&lt;p&gt;The UNIX shell can be used interactively, but the real power is when the shell is used as a programming language. Modern shells like bash can be seen as a general-purpose language but the syntax and semantics can be awkward at times. Moreover, with UNIX a broad range of small utilities follows (cut, sed, tr, etc.). These utilities together with the programming constructs of the shell, enables the user to automate any tasks and thereby become a more productive user.&lt;/p&gt;

&lt;p&gt;This talk will go through how to use the command-line/terminal/shell efficiently (key bindings, pipes, redirection, etc.), and general patterns and pitfall in shell scripting will be discussed (checking if a file exists, looping, etc.). To feel the real power of OS X, knowing how to write shell scripts is essential.&lt;/p&gt;

&lt;h4 id="about-the-speaker-kenneth-geisshirt"&gt;About the Speaker: Kenneth Geisshirt&lt;/h4&gt;
&lt;p&gt;Kenneth holds a Ph.D. in chemistry (and a B.Sc. in computer science), and in the 1990s he primarily worked on simulating chemical reacting on supercomputers. After graduating, he has been working as a software developer focusing on open-source software. Currently, he is working for Realm where he is part of the Android team. In his spare time, he has been speaking at meetups, conferences, and user groups and writing articles and book on topics related to software development and open source software.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Early days of Unix and design of sh</title>
    <link rel="alternate" href="https://talks.discoverbsd.com/2016/01/01/early-days-of-unix-and-design-of-sh.html"/>
    <id>https://talks.discoverbsd.com/2016/01/01/early-days-of-unix-and-design-of-sh.html</id>
    <published>2016-01-01T01:00:00+01:00</published>
    <updated>2016-03-05T18:57:19+01:00</updated>
    <author>
      <name>Jan Hovancik and contributors</name>
    </author>
    <content type="html">&lt;h3 id="abstract-for-talk"&gt;Abstract for talk:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;my history and background&lt;/li&gt;
  &lt;li&gt;how and why we had to re write the shell&lt;/li&gt;
  &lt;li&gt;why I wrote my own memory management&lt;/li&gt;
  &lt;li&gt;key language design decisions&lt;/li&gt;
  &lt;li&gt;where those ideas came from&lt;/li&gt;
  &lt;li&gt;what was hard to get right&lt;/li&gt;
  &lt;li&gt;system changes we made to accommodate sh&lt;/li&gt;
  &lt;li&gt;what the rules were in UNIX group&lt;/li&gt;
  &lt;li&gt;what would I do differently today&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="about-the-speaker-steve-bourne"&gt;About the Speaker: Steve Bourne&lt;/h4&gt;
&lt;p&gt;Steve Bourne is computer scientist who is internationally known for his work on the UNIX operating system.&lt;/p&gt;

&lt;p&gt;While at Bell Laboratories, Steve designed the UNIX Command Language known as the "Bourne Shell". It is the standard command line interface to UNIX and is widely used today in scripting in the UNIX programming environment.&lt;/p&gt;

&lt;p&gt;Steve spent nine years at Bell Labs with the Seventh Edition Unix team. As well as the Bourne shell, he wrote the adb debugger and published /The UNIX System/, the second
book on the UNIX system, intended for a general readership. This book is recognized as a text for the effective use of UNIX.&lt;/p&gt;
</content>
  </entry>
</feed>
